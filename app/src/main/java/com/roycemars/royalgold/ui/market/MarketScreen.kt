package com.roycemars.royalgold.ui.market

import android.annotation.SuppressLint
import com.roycemars.royalgold.data.news.CmcAssetMentioned
import com.roycemars.royalgold.data.news.CmcNewsArticle
import com.roycemars.royalgold.ui.theme.RoyalGoldTheme
import kotlinx.coroutines.flow.StateFlow
import android.content.Intent
import android.net.Uri
import android.util.Log
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.State
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalLifecycleOwner
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import coil.compose.rememberAsyncImagePainter
import coil.request.ImageRequest
import com.roycemars.royalgold.R // For placeholder image
import kotlinx.coroutines.Dispatchers
import java.text.SimpleDateFormat
import java.util.Locale
import java.util.TimeZone

/**
 * Gemini autogenerated code
 * TODO: complete refactoring, load crypto data from CoinMarketCap, summarize with Gemini
 */

// Function to parse and format date (move to a utility file if used elsewhere)
fun formatPublishedDate(dateString: String?): String {
    if (dateString == null) return "N/A"
    return try {
        val inputFormat = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault())
        inputFormat.timeZone = TimeZone.getTimeZone("UTC")
        val date = inputFormat.parse(dateString)
        val outputFormat = SimpleDateFormat("MMM dd, yyyy 'at' hh:mm a", Locale.getDefault())
        outputFormat.timeZone = TimeZone.getDefault() // Convert to local time
        date?.let { outputFormat.format(it) } ?: "Invalid Date"
    } catch (_: Exception) {
        "Date N/A"
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun NewsScreen(newsViewModel: NewsViewModel = viewModel()) {
    val uiState by newsViewModel.uiState.collectAsStateWithLifecycleOptimized() // Use custom collect if needed

    Scaffold(
        topBar = {
            CenterAlignedTopAppBar(
                title = { Text("Crypto News", fontWeight = FontWeight.Bold) },
                colors = TopAppBarDefaults.centerAlignedTopAppBarColors(
                    containerColor = MaterialTheme.colorScheme.surfaceVariant // Or your theme color
                )
            )
        }
    ) { paddingValues ->
        Box(
            modifier = Modifier
                .padding(paddingValues)
                .fillMaxSize()
        ) {
            when (val state = uiState) {
                is NewsUiState.Loading -> {
                    CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))
                }
                is NewsUiState.Success -> {
                    if (state.articles.isEmpty()) {
                        Text(
                            "No news articles found.",
                            modifier = Modifier.align(Alignment.Center)
                        )
                    } else {
                        LazyColumn(
                            modifier = Modifier.fillMaxSize(),
                            contentPadding = PaddingValues(horizontal = 16.dp, vertical = 12.dp),
                            verticalArrangement = Arrangement.spacedBy(12.dp)
                        ) {
                            items(state.articles, key = { article: CmcNewsArticle -> article.id }) {
                                article: CmcNewsArticle ->
                                NewsArticleCard(article = article)
                            }
                        }
                    }
                }
                is NewsUiState.Error -> {
                    Text(
                        text = "Error: ${state.message}",
                        color = MaterialTheme.colorScheme.error,
                        modifier = Modifier
                            .align(Alignment.Center)
                            .padding(16.dp)
                    )
                    // Optionally add a retry button
                    Button(
                        onClick = { newsViewModel.fetchLatestNews() },
                        modifier = Modifier
                            .align(Alignment.BottomCenter)
                            .padding(16.dp)
                    ) {
                        Text("Retry")
                    }
                }
            }
        }
    }
}

// Optimized collectAsStateWithLifecycle to avoid potential issues, place in a utility file
@SuppressLint("StateFlowValueCalledInComposition")
@Composable
fun <T> StateFlow<T>.collectAsStateWithLifecycleOptimized(
): State<T> {
    LocalLifecycleOwner.current
    return collectAsState(
        initial = this.value,
        context = Dispatchers.Main.immediate // + androidx.lifecycle.lifecycleScope.coroutineContext
    )
    // For a more robust solution, consider:
    // return androidx.lifecycle.compose.collectAsStateWithLifecycle(minActiveState)
    // if you add implementation("androidx.lifecycle:lifecycle-runtime-compose:2.6.0") or newer
}


@Composable
fun NewsArticleCard(article: CmcNewsArticle) {
    val context = LocalContext.current

    ElevatedCard( // Using ElevatedCard for a bit of shadow, similar to "Manage Subscriptions"
        modifier = Modifier
            .fillMaxWidth()
            .clickable {
                // Open article URL in browser
                try {
                    val intent = Intent(Intent.ACTION_VIEW, Uri.parse(article.url))
                    context.startActivity(intent)
                } catch (e: Exception) {
                    // Handle error (e.g., invalid URL or no browser)
                    Log.e("NewsArticleCard", "Could not open URL: ${article.url}", e)
                }
            },
        shape = RoundedCornerShape(12.dp), // More rounded corners
        colors = CardDefaults.elevatedCardColors(
            containerColor = MaterialTheme.colorScheme.surface // Darker card background
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
    ) {
        Column {
            if (!article.cover.isNullOrEmpty()) {
                Image(
                    painter = rememberAsyncImagePainter(
                        ImageRequest.Builder(LocalContext.current)
                            .data(data = article.cover)
                            .apply(block = fun ImageRequest.Builder.() {
                                crossfade(true)
                                placeholder(R.drawable.ic_launcher_background) // Replace with a generic placeholder
                                error(R.drawable.ic_launcher_background) // Replace with an error image
                            }).build()
                    ),
                    contentDescription = article.title,
                    contentScale = ContentScale.Crop, // Crop to fill bounds
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(180.dp) // Fixed height for the image
                        .clip(RoundedCornerShape(topStart = 12.dp, topEnd = 12.dp)) // Clip image top corners
                )
            } else {
                // Optional: Placeholder if no image
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(60.dp) // Smaller placeholder if no image
                        .background(MaterialTheme.colorScheme.onSurface.copy(alpha = 0.05f)),
                    contentAlignment = Alignment.Center
                ) {
                    Text("No Image", style = MaterialTheme.typography.labelMedium)
                }
            }

            Column(
                modifier = Modifier
                    .padding(horizontal = 16.dp, vertical = 12.dp)
            ) {
                Text(
                    text = article.title,
                    style = MaterialTheme.typography.titleLarge.copy(fontSize = 18.sp), // Slightly smaller title
                    fontWeight = FontWeight.Bold,
                    maxLines = 2,
                    overflow = TextOverflow.Ellipsis,
                    color = MaterialTheme.colorScheme.onSurface // Ensure good contrast
                )
                Spacer(modifier = Modifier.height(4.dp))
                if (!article.subtitle.isNullOrBlank() && article.subtitle != article.title) {
                    Text(
                        text = article.subtitle,
                        style = MaterialTheme.typography.bodyMedium,
                        maxLines = 3,
                        overflow = TextOverflow.Ellipsis,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                }
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.SpaceBetween,
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Text(
                        text = article.sourceName,
                        style = MaterialTheme.typography.labelSmall,
                        color = MaterialTheme.colorScheme.primary,
                        fontWeight = FontWeight.SemiBold
                    )
                    Text(
                        text = formatPublishedDate(article.publishedAt),
                        style = MaterialTheme.typography.labelSmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
                if (article.assets.isNotEmpty()) {
                    Spacer(modifier = Modifier.height(6.dp))
                    Text(
                        // Displaying only the first few mentioned assets for brevity
                        text = "Mentions: ${article.assets.take(3).joinToString { it.symbol }} ${if (article.assets.size > 3) "..." else ""}",
                        style = MaterialTheme.typography.labelSmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.7f)
                    )
                }
            }
        }
    }
}


@Preview(showBackground = true)
@Composable
fun NewsScreenPreview() {
    // You'd ideally use a fake ViewModel or pass a preview state for better previews
    RoyalGoldTheme(true) { // Assuming a dark theme for preview
        NewsScreen()
    }
}

@Preview(showBackground = true)
@Composable
fun NewsArticleCardPreview() {
    val sampleArticle = CmcNewsArticle(
        id = 1,
        title = "Bitcoin Hits New All-Time High Amidst Market Frenzy and Institutional Adoption",
        subtitle = "The leading cryptocurrency continues its upward trajectory, breaking previous records.",
        slug = "bitcoin-ath-frenzy",
        type = "article",
        url = "https://coinmarketcap.com/alexandria/article/bitcoin-hits-new-all-time-high",
        sourceName = "CoinMarketCap Alexandria",
        sourceUrl = "https://coinmarketcap.com/alexandria/",
        cover = null, // "https://via.placeholder.com/600x400.png?text=News+Cover", // Example image URL
        publishedAt = "2024-03-15T10:30:00.000Z",
        assets = listOf(
            CmcAssetMentioned(1, "Bitcoin", "BTC", "bitcoin"),
            CmcAssetMentioned(1027, "Ethereum", "ETH", "ethereum")
        )
    )
    RoyalGoldTheme(true) {
        Box(modifier = Modifier.padding(16.dp)) {
            NewsArticleCard(article = sampleArticle)
        }
    }
}